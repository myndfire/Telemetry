using System;
using System.IO;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Platform.Logging.Api;
using Serilog;
using Serilog.Events;

namespace WebApiSerilogElasticsearch
{
    public class ProgramOld
    {
        public static void Main(string[] args)
        {
            //Read Configuration from appSettings
            var builder = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                .AddEnvironmentVariables();

            IConfigurationRoot config = builder.Build();
            //Initialize Logger
            Log.Logger = new LoggerConfiguration()
                .ReadFrom.Configuration(config)

                //Will only log the Assembly.FullName log details if the level is Warning or above
                .Enrich.AtLevel(
                    LogEventLevel.Warning,
                    e => e.WithProperty("Version", typeof(Program).Assembly.FullName))

                //Will only log the Caller log details if the level is Warning or above
                .Enrich.AtLevel(
                    LogEventLevel.Warning,
                    e => e.WithCaller())

                .CreateLogger();
            try
            {
                Log.Information("Application Starting.");
                CreateHostBuilder(args).Build().Run();
            }
            catch (Exception ex)
            {
                Log.Fatal(ex, "The Application failed to start.");
            }
            finally
            {
                Log.CloseAndFlush();
            }
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .UseSerilog()
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}
